spark-bench = {
  spark-submit-config = [
    {
      spark-bench-jar = "local:///opt/spark-bench/lib/spark-bench-2.1.1_0.3.0-RELEASE.jar"
      conf = {
        "spark.ui.showConsoleProgress" = "false"
        "spark.ui.enabled" = "false"
        "spark.ui.retainedJobs" = "0"
        "spark.ui.retainedStages" = "0"
        "spark.ui.retainedTasks" = "0"
        "spark.sql.ui.retainedExecutions" = "0"
        "spark.sql.autoBroadcastJoinThreshold" = "-1"
        "spark.sql.crossJoin.enabled" = "true"
        "spark.sql.shuffle.partitions" = "400"
        "spark.serializer" = "org.apache.spark.serializer.KryoSerializer"
        "spark.debug.maxToStringFields" = "100"
        "spark.sql.warehouse.dir" = "hdfs://hdfs:9000/tpcds-warehouse-nonpartitioned-1GB"
        "spark.executor.cores" = "1"
        "spark.executor.instances" = "19"
        "spark.executor.memory" = "12G"
        "spark.driver.memory" = "10G"
        "spark.app.name" = "tpcds-query-1GB"
        "spark.kubernetes.container.image" = "cinple/spark:2.3-hadoop3.0.0"
        "spark.driver.maxResultSize" = "4G"
      }
      suites-parallel = false
      workload-suites = [
        {
          descr = "Query a nonpartitioned 1GB dataset"
          benchmark-output = "hdfs://hdfs:9000/sok-bench-output-nonpartitioned-query-1GB-20runs.csv"
          parallel = false
          repeat = 20
          workloads = [
            {
              name = "tpcds"
              querystream = "hdfs://hdfs:9000/tpcds-queries-nonpartitioned-1GB/query_0.sql"
              createtemptables = true
            }
          ]
        }
      ]
    }
  ]
}
