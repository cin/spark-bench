spark-bench = {
  spark-submit-config = [
    {
      spark-args = {
        executor-memory = "14G"
        driver-memory = "12G"
        total-executor-cores = "19"
      }
      conf = {
        "spark.ui.showConsoleProgress" = "false"
        "spark.ui.enabled" = "false"
        "spark.ui.retainedJobs" = "0"
        "spark.ui.retainedStages" = "0"
        "spark.ui.retainedTasks" = "0"
        "spark.sql.ui.retainedExecutions" = "0"
        "spark.sql.autoBroadcastJoinThreshold" = "-1"
        "spark.sql.crossJoin.enabled" = "true"
        "spark.sql.shuffle.partitions" = "200"
        "spark.serializer" = "org.apache.spark.serializer.KryoSerializer"
        "spark.dynamicAllocation.enabled" = "false"
        "spark.shuffle.service.enabled" = "false"
        "spark.debug.maxToStringFields" = "100"
        "spark.sql.warehouse.dir" = "hdfs:///tpcds-warehouse-partitioned-100GB"
        "spark.executor.cores" = "1"
        "spark.app.name" = "ssok-tpcds-query-100GB"
        "spark.driver.maxResultSize" = "4G"
        "spark.executor.heartbeatInterval" = "60s"
      }
      suites-parallel = false
      workload-suites = [
        {
          descr = "Query a partitioned 100GB dataset"
          benchmark-output = "hdfs:///ssok-bench-output.csv"
          save-mode = "append"
          parallel = false
          repeat = 1
          workloads = [
            {
              name = "tpcds"
              querystream = "hdfs:///tpcds-queries-partitioned-100GB/query_0.sql"
              createtemptables = true
              explainqueries = true
            }
          ]
        }
      ]
    }
  ]
}
